// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: aptcaller/aptcaller/query.proto

package aptcaller

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Params_FullMethodName                    = "/aptcaller.aptcaller.Query/Params"
	Query_GetAccount_FullMethodName                = "/aptcaller.aptcaller.Query/GetAccount"
	Query_GetAccountResources_FullMethodName       = "/aptcaller.aptcaller.Query/GetAccountResources"
	Query_GetAccountModules_FullMethodName         = "/aptcaller.aptcaller.Query/GetAccountModules"
	Query_GetAccountResource_FullMethodName        = "/aptcaller.aptcaller.Query/GetAccountResource"
	Query_GetAccountModule_FullMethodName          = "/aptcaller.aptcaller.Query/GetAccountModule"
	Query_GetBlockByHeight_FullMethodName          = "/aptcaller.aptcaller.Query/GetBlockByHeight"
	Query_GetBlockByVersion_FullMethodName         = "/aptcaller.aptcaller.Query/GetBlockByVersion"
	Query_GetEventsByCreationNumber_FullMethodName = "/aptcaller.aptcaller.Query/GetEventsByCreationNumber"
	Query_GetEventsByEventHandle_FullMethodName    = "/aptcaller.aptcaller.Query/GetEventsByEventHandle"
	Query_GetLedgerInfo_FullMethodName             = "/aptcaller.aptcaller.Query/GetLedgerInfo"
	Query_GetTransactions_FullMethodName           = "/aptcaller.aptcaller.Query/GetTransactions"
	Query_GetTransactionByHash_FullMethodName      = "/aptcaller.aptcaller.Query/GetTransactionByHash"
	Query_GetWaitTransactionByHash_FullMethodName  = "/aptcaller.aptcaller.Query/GetWaitTransactionByHash"
	Query_GetTransactionByVersion_FullMethodName   = "/aptcaller.aptcaller.Query/GetTransactionByVersion"
	Query_GetAccountTransaction_FullMethodName     = "/aptcaller.aptcaller.Query/GetAccountTransaction"
	Query_EstimateGasPrice_FullMethodName          = "/aptcaller.aptcaller.Query/EstimateGasPrice"
	Query_SubmitBatchTransaction_FullMethodName    = "/aptcaller.aptcaller.Query/SubmitBatchTransaction"
	Query_SimulateTransaction_FullMethodName       = "/aptcaller.aptcaller.Query/SimulateTransaction"
	Query_EncodeSubmission_FullMethodName          = "/aptcaller.aptcaller.Query/EncodeSubmission"
	Query_GetTransactionByCount_FullMethodName     = "/aptcaller.aptcaller.Query/GetTransactionByCount"
	Query_ViewFunction_FullMethodName              = "/aptcaller.aptcaller.Query/ViewFunction"
	Query_GetTableItem_FullMethodName              = "/aptcaller.aptcaller.Query/GetTableItem"
	Query_GetRawTableItem_FullMethodName           = "/aptcaller.aptcaller.Query/GetRawTableItem"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of GetAccount items.
	GetAccount(ctx context.Context, in *QueryGetAccountRequest, opts ...grpc.CallOption) (*QueryGetAccountResponse, error)
	// Queries a list of GetAccountResources items.
	GetAccountResources(ctx context.Context, in *QueryGetAccountResourcesRequest, opts ...grpc.CallOption) (*QueryGetAccountResourcesResponse, error)
	// Queries a list of GetAccountModules items.
	GetAccountModules(ctx context.Context, in *QueryGetAccountModulesRequest, opts ...grpc.CallOption) (*QueryGetAccountModulesResponse, error)
	// Queries a list of GetAccountResource items.
	GetAccountResource(ctx context.Context, in *QueryGetAccountResourceRequest, opts ...grpc.CallOption) (*QueryGetAccountResourceResponse, error)
	// Queries a list of GetAccountModule items.
	GetAccountModule(ctx context.Context, in *QueryGetAccountModuleRequest, opts ...grpc.CallOption) (*QueryGetAccountModuleResponse, error)
	// Queries a list of GetBlockByHeight items.
	GetBlockByHeight(ctx context.Context, in *QueryGetBlockByHeightRequest, opts ...grpc.CallOption) (*QueryGetBlockByHeightResponse, error)
	// Queries a list of GetBlockByVersion items.
	GetBlockByVersion(ctx context.Context, in *QueryGetBlockByVersionRequest, opts ...grpc.CallOption) (*QueryGetBlockByVersionResponse, error)
	// Queries a list of GetEventsByCreationNumber items.
	GetEventsByCreationNumber(ctx context.Context, in *QueryGetEventsByCreationNumberRequest, opts ...grpc.CallOption) (*QueryGetEventsByCreationNumberResponse, error)
	// Queries a list of GetEventsByEventHandle items.
	GetEventsByEventHandle(ctx context.Context, in *QueryGetEventsByEventHandleRequest, opts ...grpc.CallOption) (*QueryGetEventsByEventHandleResponse, error)
	// Queries a list of GetLedgerInfo items.
	GetLedgerInfo(ctx context.Context, in *QueryGetLedgerInfoRequest, opts ...grpc.CallOption) (*QueryGetLedgerInfoResponse, error)
	// Queries a list of GetTransactions items.
	GetTransactions(ctx context.Context, in *QueryGetTransactionsRequest, opts ...grpc.CallOption) (*QueryGetTransactionsResponse, error)
	// Queries a list of GetTransactionByHash items.
	GetTransactionByHash(ctx context.Context, in *QueryGetTransactionByHashRequest, opts ...grpc.CallOption) (*QueryGetTransactionByHashResponse, error)
	// Queries a list of GetWaitTransactionByHash items.
	GetWaitTransactionByHash(ctx context.Context, in *QueryGetWaitTransactionByHashRequest, opts ...grpc.CallOption) (*QueryGetWaitTransactionByHashResponse, error)
	// Queries a list of GetTransactionByVersion items.
	GetTransactionByVersion(ctx context.Context, in *QueryGetTransactionByVersionRequest, opts ...grpc.CallOption) (*QueryGetTransactionByVersionResponse, error)
	// Queries a list of GetAccountTransaction items.
	GetAccountTransaction(ctx context.Context, in *QueryGetAccountTransactionRequest, opts ...grpc.CallOption) (*QueryGetAccountTransactionResponse, error)
	// Queries a list of EstimateGasPrice items.
	EstimateGasPrice(ctx context.Context, in *QueryEstimateGasPriceRequest, opts ...grpc.CallOption) (*QueryEstimateGasPriceResponse, error)
	// Queries a list of SubmitBatchTransaction items.
	SubmitBatchTransaction(ctx context.Context, in *QuerySubmitBatchTransactionRequest, opts ...grpc.CallOption) (*QuerySubmitBatchTransactionResponse, error)
	// Queries a list of SimulateTransaction items.
	SimulateTransaction(ctx context.Context, in *QuerySimulateTransactionRequest, opts ...grpc.CallOption) (*QuerySimulateTransactionResponse, error)
	// Queries a list of EncodeSubmission items.
	EncodeSubmission(ctx context.Context, in *QueryEncodeSubmissionRequest, opts ...grpc.CallOption) (*QueryEncodeSubmissionResponse, error)
	// Queries a list of GetTransactionByCount items.
	GetTransactionByCount(ctx context.Context, in *QueryGetTransactionByCountRequest, opts ...grpc.CallOption) (*QueryGetTransactionByCountResponse, error)
	// Queries a list of ViewFunction items.
	ViewFunction(ctx context.Context, in *QueryViewFunctionRequest, opts ...grpc.CallOption) (*QueryViewFunctionResponse, error)
	// Queries a list of GetTableItem items.
	GetTableItem(ctx context.Context, in *QueryGetTableItemRequest, opts ...grpc.CallOption) (*QueryGetTableItemResponse, error)
	// Queries a list of GetRawTableItem items.
	GetRawTableItem(ctx context.Context, in *QueryGetRawTableItemRequest, opts ...grpc.CallOption) (*QueryGetRawTableItemResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAccount(ctx context.Context, in *QueryGetAccountRequest, opts ...grpc.CallOption) (*QueryGetAccountResponse, error) {
	out := new(QueryGetAccountResponse)
	err := c.cc.Invoke(ctx, Query_GetAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAccountResources(ctx context.Context, in *QueryGetAccountResourcesRequest, opts ...grpc.CallOption) (*QueryGetAccountResourcesResponse, error) {
	out := new(QueryGetAccountResourcesResponse)
	err := c.cc.Invoke(ctx, Query_GetAccountResources_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAccountModules(ctx context.Context, in *QueryGetAccountModulesRequest, opts ...grpc.CallOption) (*QueryGetAccountModulesResponse, error) {
	out := new(QueryGetAccountModulesResponse)
	err := c.cc.Invoke(ctx, Query_GetAccountModules_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAccountResource(ctx context.Context, in *QueryGetAccountResourceRequest, opts ...grpc.CallOption) (*QueryGetAccountResourceResponse, error) {
	out := new(QueryGetAccountResourceResponse)
	err := c.cc.Invoke(ctx, Query_GetAccountResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAccountModule(ctx context.Context, in *QueryGetAccountModuleRequest, opts ...grpc.CallOption) (*QueryGetAccountModuleResponse, error) {
	out := new(QueryGetAccountModuleResponse)
	err := c.cc.Invoke(ctx, Query_GetAccountModule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetBlockByHeight(ctx context.Context, in *QueryGetBlockByHeightRequest, opts ...grpc.CallOption) (*QueryGetBlockByHeightResponse, error) {
	out := new(QueryGetBlockByHeightResponse)
	err := c.cc.Invoke(ctx, Query_GetBlockByHeight_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetBlockByVersion(ctx context.Context, in *QueryGetBlockByVersionRequest, opts ...grpc.CallOption) (*QueryGetBlockByVersionResponse, error) {
	out := new(QueryGetBlockByVersionResponse)
	err := c.cc.Invoke(ctx, Query_GetBlockByVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetEventsByCreationNumber(ctx context.Context, in *QueryGetEventsByCreationNumberRequest, opts ...grpc.CallOption) (*QueryGetEventsByCreationNumberResponse, error) {
	out := new(QueryGetEventsByCreationNumberResponse)
	err := c.cc.Invoke(ctx, Query_GetEventsByCreationNumber_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetEventsByEventHandle(ctx context.Context, in *QueryGetEventsByEventHandleRequest, opts ...grpc.CallOption) (*QueryGetEventsByEventHandleResponse, error) {
	out := new(QueryGetEventsByEventHandleResponse)
	err := c.cc.Invoke(ctx, Query_GetEventsByEventHandle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetLedgerInfo(ctx context.Context, in *QueryGetLedgerInfoRequest, opts ...grpc.CallOption) (*QueryGetLedgerInfoResponse, error) {
	out := new(QueryGetLedgerInfoResponse)
	err := c.cc.Invoke(ctx, Query_GetLedgerInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetTransactions(ctx context.Context, in *QueryGetTransactionsRequest, opts ...grpc.CallOption) (*QueryGetTransactionsResponse, error) {
	out := new(QueryGetTransactionsResponse)
	err := c.cc.Invoke(ctx, Query_GetTransactions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetTransactionByHash(ctx context.Context, in *QueryGetTransactionByHashRequest, opts ...grpc.CallOption) (*QueryGetTransactionByHashResponse, error) {
	out := new(QueryGetTransactionByHashResponse)
	err := c.cc.Invoke(ctx, Query_GetTransactionByHash_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetWaitTransactionByHash(ctx context.Context, in *QueryGetWaitTransactionByHashRequest, opts ...grpc.CallOption) (*QueryGetWaitTransactionByHashResponse, error) {
	out := new(QueryGetWaitTransactionByHashResponse)
	err := c.cc.Invoke(ctx, Query_GetWaitTransactionByHash_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetTransactionByVersion(ctx context.Context, in *QueryGetTransactionByVersionRequest, opts ...grpc.CallOption) (*QueryGetTransactionByVersionResponse, error) {
	out := new(QueryGetTransactionByVersionResponse)
	err := c.cc.Invoke(ctx, Query_GetTransactionByVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAccountTransaction(ctx context.Context, in *QueryGetAccountTransactionRequest, opts ...grpc.CallOption) (*QueryGetAccountTransactionResponse, error) {
	out := new(QueryGetAccountTransactionResponse)
	err := c.cc.Invoke(ctx, Query_GetAccountTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EstimateGasPrice(ctx context.Context, in *QueryEstimateGasPriceRequest, opts ...grpc.CallOption) (*QueryEstimateGasPriceResponse, error) {
	out := new(QueryEstimateGasPriceResponse)
	err := c.cc.Invoke(ctx, Query_EstimateGasPrice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SubmitBatchTransaction(ctx context.Context, in *QuerySubmitBatchTransactionRequest, opts ...grpc.CallOption) (*QuerySubmitBatchTransactionResponse, error) {
	out := new(QuerySubmitBatchTransactionResponse)
	err := c.cc.Invoke(ctx, Query_SubmitBatchTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SimulateTransaction(ctx context.Context, in *QuerySimulateTransactionRequest, opts ...grpc.CallOption) (*QuerySimulateTransactionResponse, error) {
	out := new(QuerySimulateTransactionResponse)
	err := c.cc.Invoke(ctx, Query_SimulateTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EncodeSubmission(ctx context.Context, in *QueryEncodeSubmissionRequest, opts ...grpc.CallOption) (*QueryEncodeSubmissionResponse, error) {
	out := new(QueryEncodeSubmissionResponse)
	err := c.cc.Invoke(ctx, Query_EncodeSubmission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetTransactionByCount(ctx context.Context, in *QueryGetTransactionByCountRequest, opts ...grpc.CallOption) (*QueryGetTransactionByCountResponse, error) {
	out := new(QueryGetTransactionByCountResponse)
	err := c.cc.Invoke(ctx, Query_GetTransactionByCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ViewFunction(ctx context.Context, in *QueryViewFunctionRequest, opts ...grpc.CallOption) (*QueryViewFunctionResponse, error) {
	out := new(QueryViewFunctionResponse)
	err := c.cc.Invoke(ctx, Query_ViewFunction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetTableItem(ctx context.Context, in *QueryGetTableItemRequest, opts ...grpc.CallOption) (*QueryGetTableItemResponse, error) {
	out := new(QueryGetTableItemResponse)
	err := c.cc.Invoke(ctx, Query_GetTableItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetRawTableItem(ctx context.Context, in *QueryGetRawTableItemRequest, opts ...grpc.CallOption) (*QueryGetRawTableItemResponse, error) {
	out := new(QueryGetRawTableItemResponse)
	err := c.cc.Invoke(ctx, Query_GetRawTableItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of GetAccount items.
	GetAccount(context.Context, *QueryGetAccountRequest) (*QueryGetAccountResponse, error)
	// Queries a list of GetAccountResources items.
	GetAccountResources(context.Context, *QueryGetAccountResourcesRequest) (*QueryGetAccountResourcesResponse, error)
	// Queries a list of GetAccountModules items.
	GetAccountModules(context.Context, *QueryGetAccountModulesRequest) (*QueryGetAccountModulesResponse, error)
	// Queries a list of GetAccountResource items.
	GetAccountResource(context.Context, *QueryGetAccountResourceRequest) (*QueryGetAccountResourceResponse, error)
	// Queries a list of GetAccountModule items.
	GetAccountModule(context.Context, *QueryGetAccountModuleRequest) (*QueryGetAccountModuleResponse, error)
	// Queries a list of GetBlockByHeight items.
	GetBlockByHeight(context.Context, *QueryGetBlockByHeightRequest) (*QueryGetBlockByHeightResponse, error)
	// Queries a list of GetBlockByVersion items.
	GetBlockByVersion(context.Context, *QueryGetBlockByVersionRequest) (*QueryGetBlockByVersionResponse, error)
	// Queries a list of GetEventsByCreationNumber items.
	GetEventsByCreationNumber(context.Context, *QueryGetEventsByCreationNumberRequest) (*QueryGetEventsByCreationNumberResponse, error)
	// Queries a list of GetEventsByEventHandle items.
	GetEventsByEventHandle(context.Context, *QueryGetEventsByEventHandleRequest) (*QueryGetEventsByEventHandleResponse, error)
	// Queries a list of GetLedgerInfo items.
	GetLedgerInfo(context.Context, *QueryGetLedgerInfoRequest) (*QueryGetLedgerInfoResponse, error)
	// Queries a list of GetTransactions items.
	GetTransactions(context.Context, *QueryGetTransactionsRequest) (*QueryGetTransactionsResponse, error)
	// Queries a list of GetTransactionByHash items.
	GetTransactionByHash(context.Context, *QueryGetTransactionByHashRequest) (*QueryGetTransactionByHashResponse, error)
	// Queries a list of GetWaitTransactionByHash items.
	GetWaitTransactionByHash(context.Context, *QueryGetWaitTransactionByHashRequest) (*QueryGetWaitTransactionByHashResponse, error)
	// Queries a list of GetTransactionByVersion items.
	GetTransactionByVersion(context.Context, *QueryGetTransactionByVersionRequest) (*QueryGetTransactionByVersionResponse, error)
	// Queries a list of GetAccountTransaction items.
	GetAccountTransaction(context.Context, *QueryGetAccountTransactionRequest) (*QueryGetAccountTransactionResponse, error)
	// Queries a list of EstimateGasPrice items.
	EstimateGasPrice(context.Context, *QueryEstimateGasPriceRequest) (*QueryEstimateGasPriceResponse, error)
	// Queries a list of SubmitBatchTransaction items.
	SubmitBatchTransaction(context.Context, *QuerySubmitBatchTransactionRequest) (*QuerySubmitBatchTransactionResponse, error)
	// Queries a list of SimulateTransaction items.
	SimulateTransaction(context.Context, *QuerySimulateTransactionRequest) (*QuerySimulateTransactionResponse, error)
	// Queries a list of EncodeSubmission items.
	EncodeSubmission(context.Context, *QueryEncodeSubmissionRequest) (*QueryEncodeSubmissionResponse, error)
	// Queries a list of GetTransactionByCount items.
	GetTransactionByCount(context.Context, *QueryGetTransactionByCountRequest) (*QueryGetTransactionByCountResponse, error)
	// Queries a list of ViewFunction items.
	ViewFunction(context.Context, *QueryViewFunctionRequest) (*QueryViewFunctionResponse, error)
	// Queries a list of GetTableItem items.
	GetTableItem(context.Context, *QueryGetTableItemRequest) (*QueryGetTableItemResponse, error)
	// Queries a list of GetRawTableItem items.
	GetRawTableItem(context.Context, *QueryGetRawTableItemRequest) (*QueryGetRawTableItemResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) GetAccount(context.Context, *QueryGetAccountRequest) (*QueryGetAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (UnimplementedQueryServer) GetAccountResources(context.Context, *QueryGetAccountResourcesRequest) (*QueryGetAccountResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountResources not implemented")
}
func (UnimplementedQueryServer) GetAccountModules(context.Context, *QueryGetAccountModulesRequest) (*QueryGetAccountModulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountModules not implemented")
}
func (UnimplementedQueryServer) GetAccountResource(context.Context, *QueryGetAccountResourceRequest) (*QueryGetAccountResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountResource not implemented")
}
func (UnimplementedQueryServer) GetAccountModule(context.Context, *QueryGetAccountModuleRequest) (*QueryGetAccountModuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountModule not implemented")
}
func (UnimplementedQueryServer) GetBlockByHeight(context.Context, *QueryGetBlockByHeightRequest) (*QueryGetBlockByHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockByHeight not implemented")
}
func (UnimplementedQueryServer) GetBlockByVersion(context.Context, *QueryGetBlockByVersionRequest) (*QueryGetBlockByVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockByVersion not implemented")
}
func (UnimplementedQueryServer) GetEventsByCreationNumber(context.Context, *QueryGetEventsByCreationNumberRequest) (*QueryGetEventsByCreationNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventsByCreationNumber not implemented")
}
func (UnimplementedQueryServer) GetEventsByEventHandle(context.Context, *QueryGetEventsByEventHandleRequest) (*QueryGetEventsByEventHandleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventsByEventHandle not implemented")
}
func (UnimplementedQueryServer) GetLedgerInfo(context.Context, *QueryGetLedgerInfoRequest) (*QueryGetLedgerInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLedgerInfo not implemented")
}
func (UnimplementedQueryServer) GetTransactions(context.Context, *QueryGetTransactionsRequest) (*QueryGetTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactions not implemented")
}
func (UnimplementedQueryServer) GetTransactionByHash(context.Context, *QueryGetTransactionByHashRequest) (*QueryGetTransactionByHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionByHash not implemented")
}
func (UnimplementedQueryServer) GetWaitTransactionByHash(context.Context, *QueryGetWaitTransactionByHashRequest) (*QueryGetWaitTransactionByHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWaitTransactionByHash not implemented")
}
func (UnimplementedQueryServer) GetTransactionByVersion(context.Context, *QueryGetTransactionByVersionRequest) (*QueryGetTransactionByVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionByVersion not implemented")
}
func (UnimplementedQueryServer) GetAccountTransaction(context.Context, *QueryGetAccountTransactionRequest) (*QueryGetAccountTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountTransaction not implemented")
}
func (UnimplementedQueryServer) EstimateGasPrice(context.Context, *QueryEstimateGasPriceRequest) (*QueryEstimateGasPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateGasPrice not implemented")
}
func (UnimplementedQueryServer) SubmitBatchTransaction(context.Context, *QuerySubmitBatchTransactionRequest) (*QuerySubmitBatchTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitBatchTransaction not implemented")
}
func (UnimplementedQueryServer) SimulateTransaction(context.Context, *QuerySimulateTransactionRequest) (*QuerySimulateTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimulateTransaction not implemented")
}
func (UnimplementedQueryServer) EncodeSubmission(context.Context, *QueryEncodeSubmissionRequest) (*QueryEncodeSubmissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncodeSubmission not implemented")
}
func (UnimplementedQueryServer) GetTransactionByCount(context.Context, *QueryGetTransactionByCountRequest) (*QueryGetTransactionByCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionByCount not implemented")
}
func (UnimplementedQueryServer) ViewFunction(context.Context, *QueryViewFunctionRequest) (*QueryViewFunctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewFunction not implemented")
}
func (UnimplementedQueryServer) GetTableItem(context.Context, *QueryGetTableItemRequest) (*QueryGetTableItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTableItem not implemented")
}
func (UnimplementedQueryServer) GetRawTableItem(context.Context, *QueryGetRawTableItemRequest) (*QueryGetRawTableItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRawTableItem not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAccount(ctx, req.(*QueryGetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAccountResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAccountResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAccountResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetAccountResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAccountResources(ctx, req.(*QueryGetAccountResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAccountModules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAccountModulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAccountModules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetAccountModules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAccountModules(ctx, req.(*QueryGetAccountModulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAccountResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAccountResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAccountResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetAccountResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAccountResource(ctx, req.(*QueryGetAccountResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAccountModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAccountModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAccountModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetAccountModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAccountModule(ctx, req.(*QueryGetAccountModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetBlockByHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetBlockByHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetBlockByHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetBlockByHeight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetBlockByHeight(ctx, req.(*QueryGetBlockByHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetBlockByVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetBlockByVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetBlockByVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetBlockByVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetBlockByVersion(ctx, req.(*QueryGetBlockByVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetEventsByCreationNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetEventsByCreationNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetEventsByCreationNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetEventsByCreationNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetEventsByCreationNumber(ctx, req.(*QueryGetEventsByCreationNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetEventsByEventHandle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetEventsByEventHandleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetEventsByEventHandle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetEventsByEventHandle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetEventsByEventHandle(ctx, req.(*QueryGetEventsByEventHandleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetLedgerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetLedgerInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetLedgerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetLedgerInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetLedgerInfo(ctx, req.(*QueryGetLedgerInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetTransactions(ctx, req.(*QueryGetTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetTransactionByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTransactionByHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetTransactionByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetTransactionByHash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetTransactionByHash(ctx, req.(*QueryGetTransactionByHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetWaitTransactionByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetWaitTransactionByHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetWaitTransactionByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetWaitTransactionByHash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetWaitTransactionByHash(ctx, req.(*QueryGetWaitTransactionByHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetTransactionByVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTransactionByVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetTransactionByVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetTransactionByVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetTransactionByVersion(ctx, req.(*QueryGetTransactionByVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAccountTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAccountTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAccountTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetAccountTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAccountTransaction(ctx, req.(*QueryGetAccountTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EstimateGasPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEstimateGasPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EstimateGasPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_EstimateGasPrice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EstimateGasPrice(ctx, req.(*QueryEstimateGasPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SubmitBatchTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySubmitBatchTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SubmitBatchTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_SubmitBatchTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SubmitBatchTransaction(ctx, req.(*QuerySubmitBatchTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SimulateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySimulateTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SimulateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_SimulateTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SimulateTransaction(ctx, req.(*QuerySimulateTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EncodeSubmission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEncodeSubmissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EncodeSubmission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_EncodeSubmission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EncodeSubmission(ctx, req.(*QueryEncodeSubmissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetTransactionByCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTransactionByCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetTransactionByCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetTransactionByCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetTransactionByCount(ctx, req.(*QueryGetTransactionByCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ViewFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryViewFunctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ViewFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ViewFunction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ViewFunction(ctx, req.(*QueryViewFunctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetTableItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTableItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetTableItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetTableItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetTableItem(ctx, req.(*QueryGetTableItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetRawTableItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRawTableItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetRawTableItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetRawTableItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetRawTableItem(ctx, req.(*QueryGetRawTableItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aptcaller.aptcaller.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _Query_GetAccount_Handler,
		},
		{
			MethodName: "GetAccountResources",
			Handler:    _Query_GetAccountResources_Handler,
		},
		{
			MethodName: "GetAccountModules",
			Handler:    _Query_GetAccountModules_Handler,
		},
		{
			MethodName: "GetAccountResource",
			Handler:    _Query_GetAccountResource_Handler,
		},
		{
			MethodName: "GetAccountModule",
			Handler:    _Query_GetAccountModule_Handler,
		},
		{
			MethodName: "GetBlockByHeight",
			Handler:    _Query_GetBlockByHeight_Handler,
		},
		{
			MethodName: "GetBlockByVersion",
			Handler:    _Query_GetBlockByVersion_Handler,
		},
		{
			MethodName: "GetEventsByCreationNumber",
			Handler:    _Query_GetEventsByCreationNumber_Handler,
		},
		{
			MethodName: "GetEventsByEventHandle",
			Handler:    _Query_GetEventsByEventHandle_Handler,
		},
		{
			MethodName: "GetLedgerInfo",
			Handler:    _Query_GetLedgerInfo_Handler,
		},
		{
			MethodName: "GetTransactions",
			Handler:    _Query_GetTransactions_Handler,
		},
		{
			MethodName: "GetTransactionByHash",
			Handler:    _Query_GetTransactionByHash_Handler,
		},
		{
			MethodName: "GetWaitTransactionByHash",
			Handler:    _Query_GetWaitTransactionByHash_Handler,
		},
		{
			MethodName: "GetTransactionByVersion",
			Handler:    _Query_GetTransactionByVersion_Handler,
		},
		{
			MethodName: "GetAccountTransaction",
			Handler:    _Query_GetAccountTransaction_Handler,
		},
		{
			MethodName: "EstimateGasPrice",
			Handler:    _Query_EstimateGasPrice_Handler,
		},
		{
			MethodName: "SubmitBatchTransaction",
			Handler:    _Query_SubmitBatchTransaction_Handler,
		},
		{
			MethodName: "SimulateTransaction",
			Handler:    _Query_SimulateTransaction_Handler,
		},
		{
			MethodName: "EncodeSubmission",
			Handler:    _Query_EncodeSubmission_Handler,
		},
		{
			MethodName: "GetTransactionByCount",
			Handler:    _Query_GetTransactionByCount_Handler,
		},
		{
			MethodName: "ViewFunction",
			Handler:    _Query_ViewFunction_Handler,
		},
		{
			MethodName: "GetTableItem",
			Handler:    _Query_GetTableItem_Handler,
		},
		{
			MethodName: "GetRawTableItem",
			Handler:    _Query_GetRawTableItem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aptcaller/aptcaller/query.proto",
}
